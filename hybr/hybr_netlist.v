
// Generated by Cadence Genus(TM) Synthesis Solution 20.11-s111_1
// Generated on: Sep 18 2024 14:58:25 IST (Sep 18 2024 09:28:25 UTC)

// Verification Directory fv/hybr 

module fa(a, b, c, s, co);
  input a, b, c;
  output s, co;
  wire a, b, c;
  wire s, co;
  ADDFX1 g52(.A (a), .B (b), .CI (c), .CO (co), .S (s));
endmodule

module fa_24(a, b, c, s, co);
  input a, b, c;
  output s, co;
  wire a, b, c;
  wire s, co;
  ADDFX1 g52(.A (a), .B (b), .CI (c), .CO (co), .S (s));
endmodule

module fa_23(a, b, c, s, co);
  input a, b, c;
  output s, co;
  wire a, b, c;
  wire s, co;
  ADDFX1 g52(.A (a), .B (b), .CI (c), .CO (co), .S (s));
endmodule

module fa_22(a, b, c, s, co);
  input a, b, c;
  output s, co;
  wire a, b, c;
  wire s, co;
  ADDFX1 g52(.A (a), .B (b), .CI (c), .CO (co), .S (s));
endmodule

module fa_21(a, b, c, s, co);
  input a, b, c;
  output s, co;
  wire a, b, c;
  wire s, co;
  ADDFX1 g52(.A (a), .B (b), .CI (c), .CO (co), .S (s));
endmodule

module fa_20(a, b, c, s, co);
  input a, b, c;
  output s, co;
  wire a, b, c;
  wire s, co;
  ADDFX1 g52(.A (a), .B (b), .CI (c), .CO (co), .S (s));
endmodule

module fa_19(a, b, c, s, co);
  input a, b, c;
  output s, co;
  wire a, b, c;
  wire s, co;
  ADDFX1 g52(.A (a), .B (b), .CI (c), .CO (co), .S (s));
endmodule

module fa_18(a, b, c, s, co);
  input a, b, c;
  output s, co;
  wire a, b, c;
  wire s, co;
  ADDFX1 g52(.A (a), .B (b), .CI (c), .CO (co), .S (s));
endmodule

module ha(a, b, s, c);
  input a, b;
  output s, c;
  wire a, b;
  wire s, c;
  ADDHX1 g18(.A (a), .B (b), .CO (c), .S (s));
endmodule

module fa_17(a, b, c, s, co);
  input a, b, c;
  output s, co;
  wire a, b, c;
  wire s, co;
  ADDFX1 g52(.A (a), .B (b), .CI (c), .CO (co), .S (s));
endmodule

module fa_16(a, b, c, s, co);
  input a, b, c;
  output s, co;
  wire a, b, c;
  wire s, co;
  ADDFX1 g52(.A (a), .B (b), .CI (c), .CO (co), .S (s));
endmodule

module ha_28(a, b, s, c);
  input a, b;
  output s, c;
  wire a, b;
  wire s, c;
  ADDHX1 g18(.A (a), .B (b), .CO (c), .S (s));
endmodule

module fa_15(a, b, c, s, co);
  input a, b, c;
  output s, co;
  wire a, b, c;
  wire s, co;
  ADDFX1 g52(.A (a), .B (b), .CI (c), .CO (co), .S (s));
endmodule

module fa_14(a, b, c, s, co);
  input a, b, c;
  output s, co;
  wire a, b, c;
  wire s, co;
  ADDFX1 g52(.A (a), .B (b), .CI (c), .CO (co), .S (s));
endmodule

module fa_13(a, b, c, s, co);
  input a, b, c;
  output s, co;
  wire a, b, c;
  wire s, co;
  ADDFX1 g52(.A (b), .B (c), .CI (a), .CO (co), .S (s));
endmodule

module ha_27(a, b, s, c);
  input a, b;
  output s, c;
  wire a, b;
  wire s, c;
  ADDHX1 g18(.A (b), .B (a), .CO (c), .S (s));
endmodule

module ha_26(a, b, s, c);
  input a, b;
  output s, c;
  wire a, b;
  wire s, c;
  ADDHX1 g18(.A (b), .B (a), .CO (c), .S (s));
endmodule

module ha_25(a, b, s, c);
  input a, b;
  output s, c;
  wire a, b;
  wire s, c;
  ADDHX1 g18(.A (b), .B (a), .CO (c), .S (s));
endmodule

module hybr(a, b, c, sum, carry, clk);
  input [7:0] a, b, c;
  input clk;
  output [7:0] sum;
  output carry;
  wire [7:0] a, b, c;
  wire clk;
  wire [7:0] sum;
  wire carry;
  wire [7:0] s;
  wire [28:0] w;
  wire n_0, n_1;
  fa x1(a[0], b[0], c[0], s[0], w[0]);
  fa_24 x2(a[1], b[1], c[1], w[1], w[2]);
  fa_23 x3(a[2], b[2], c[2], w[3], w[4]);
  fa_22 x4(a[3], b[3], c[3], w[5], w[6]);
  fa_21 x5(a[4], b[4], c[4], w[7], w[8]);
  fa_20 x6(a[5], b[5], c[5], w[9], w[10]);
  fa_19 x7(a[6], b[6], c[6], w[11], w[12]);
  fa_18 x8(a[7], b[7], c[7], w[13], w[14]);
  ha y1(w[0], w[1], s[1], w[15]);
  fa_17 y2(w[2], w[3], w[15], s[2], w[16]);
  fa_16 y3(w[4], w[5], w[16], s[3], w[17]);
  ha_28 y5(w[8], w[9], w[19], w[20]);
  fa_15 y6(w[10], w[11], w[20], w[21], w[22]);
  fa_14 y7(w[12], w[13], w[22], w[23], w[24]);
  fa_13 y8(w[17], w[6], w[7], s[4], w[25]);
  ha_27 y9(w[25], w[19], s[5], w[26]);
  ha_26 y10(w[26], w[21], s[6], w[27]);
  ha_25 y11(w[27], w[23], s[7], w[28]);
  DFFHQX1 carry_reg(.CK (clk), .D (n_1), .Q (carry));
  XNOR2X1 g30(.A (w[24]), .B (n_0), .Y (n_1));
  XNOR2X1 g31(.A (w[14]), .B (w[28]), .Y (n_0));
  DFFHQX1 \sum_reg[4] (.CK (clk), .D (s[4]), .Q (sum[4]));
  DFFHQX1 \sum_reg[0] (.CK (clk), .D (s[0]), .Q (sum[0]));
  DFFHQX1 \sum_reg[6] (.CK (clk), .D (s[6]), .Q (sum[6]));
  DFFHQX1 \sum_reg[7] (.CK (clk), .D (s[7]), .Q (sum[7]));
  DFFHQX1 \sum_reg[5] (.CK (clk), .D (s[5]), .Q (sum[5]));
  DFFHQX1 \sum_reg[2] (.CK (clk), .D (s[2]), .Q (sum[2]));
  DFFHQX1 \sum_reg[3] (.CK (clk), .D (s[3]), .Q (sum[3]));
  DFFHQX1 \sum_reg[1] (.CK (clk), .D (s[1]), .Q (sum[1]));
endmodule

